pub fn aoc_5() {
    let mut program = [
        3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1101, 69, 55, 225, 1001, 144, 76, 224,
        101, -139, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 3, 224, 1, 223, 224, 223, 1102,
        60, 49, 225, 1102, 51, 78, 225, 1101, 82, 33, 224, 1001, 224, -115, 224, 4, 224, 1002, 223,
        8, 223, 1001, 224, 3, 224, 1, 224, 223, 223, 1102, 69, 5, 225, 2, 39, 13, 224, 1001, 224,
        -4140, 224, 4, 224, 102, 8, 223, 223, 101, 2, 224, 224, 1, 224, 223, 223, 101, 42, 44, 224,
        101, -120, 224, 224, 4, 224, 102, 8, 223, 223, 101, 3, 224, 224, 1, 223, 224, 223, 1102,
        68, 49, 224, 101, -3332, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 4, 224, 1, 224,
        223, 223, 1101, 50, 27, 225, 1102, 5, 63, 225, 1002, 139, 75, 224, 1001, 224, -3750, 224,
        4, 224, 1002, 223, 8, 223, 1001, 224, 3, 224, 1, 223, 224, 223, 102, 79, 213, 224, 1001,
        224, -2844, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 4, 224, 1, 223, 224, 223, 1, 217, 69,
        224, 1001, 224, -95, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 5, 224, 1, 223, 224, 223,
        1102, 36, 37, 225, 1101, 26, 16, 225, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105,
        1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274,
        1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0,
        1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0,
        1105, 1, 99999, 1107, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 329, 1001, 223, 1, 223,
        1108, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 344, 1001, 223, 1, 223, 107, 226, 226,
        224, 1002, 223, 2, 223, 1006, 224, 359, 101, 1, 223, 223, 1008, 226, 226, 224, 102, 2, 223,
        223, 1005, 224, 374, 1001, 223, 1, 223, 1107, 226, 677, 224, 1002, 223, 2, 223, 1006, 224,
        389, 1001, 223, 1, 223, 1008, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 404, 1001, 223,
        1, 223, 7, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 419, 1001, 223, 1, 223, 1008, 677,
        677, 224, 1002, 223, 2, 223, 1006, 224, 434, 1001, 223, 1, 223, 108, 226, 226, 224, 102, 2,
        223, 223, 1006, 224, 449, 1001, 223, 1, 223, 108, 677, 677, 224, 102, 2, 223, 223, 1006,
        224, 464, 1001, 223, 1, 223, 107, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 479, 101, 1,
        223, 223, 1108, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 494, 1001, 223, 1, 223, 107,
        677, 677, 224, 1002, 223, 2, 223, 1006, 224, 509, 101, 1, 223, 223, 7, 677, 677, 224, 102,
        2, 223, 223, 1006, 224, 524, 1001, 223, 1, 223, 1007, 226, 677, 224, 1002, 223, 2, 223,
        1005, 224, 539, 1001, 223, 1, 223, 8, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 554,
        101, 1, 223, 223, 8, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 569, 101, 1, 223, 223, 7,
        226, 677, 224, 102, 2, 223, 223, 1006, 224, 584, 1001, 223, 1, 223, 1007, 226, 226, 224,
        102, 2, 223, 223, 1006, 224, 599, 1001, 223, 1, 223, 1107, 677, 226, 224, 1002, 223, 2,
        223, 1006, 224, 614, 1001, 223, 1, 223, 1108, 677, 226, 224, 1002, 223, 2, 223, 1005, 224,
        629, 1001, 223, 1, 223, 1007, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 644, 1001, 223,
        1, 223, 108, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 659, 101, 1, 223, 223, 8, 677,
        226, 224, 1002, 223, 2, 223, 1006, 224, 674, 1001, 223, 1, 223, 4, 223, 99, 226,
    ];
    program[1] = 12;
    program[2] = 2;
    let output = run(program.clone().to_vec());
    println!("Computer output: {}", output);
    for i in 0..program.len() {
        for j in 0..program.len() {
            program[1] = i as i32;
            program[2] = j as i32;

            if 1969_0720 == run(program.clone().to_vec()) {
                println!(
                    "To get computer output 19690720 use inputs {}, {} => {}",
                    i,
                    j,
                    i * 100 + j
                );
            }
        }
    }
}

const INPUT: i32 = 1;

fn execute(mut program: Vec<i32>) -> Vec<i32> {
    let mut pc = 0;
    while pc < program.len() {
        let opcode = program[pc] % 100;
        let pm = ((program[pc] / 100) % 2) == 0;
        let p2 = ((program[pc] / 1000) % 2) == 0;
        println!("program [ {} {} {} {} {} {} {} {} {} {} ... ]",
                 program[0],
                 program[1],
                 program[2],
                 program[3],
                 program[4],
                 program[5],
                 program[6],
                 program[7],
                 program[8],
                 program[9]);
        println!("@ {}: NOW GOING TO DO {} {} {}", pc, opcode, pm, p2);
        match opcode {
            1 => add(&mut program, &mut pc, pm, p2),
            2 => multiply(&mut program, &mut pc, pm, p2),
            3 => {
                program[pc + 1] = INPUT;
                pc += 2;
            }
            4 => {
                println!("OUTPUT: {}", program[pc + 1]);
                pc += 2;
            }
            99 => break,
            _ => panic!("Bad opcode"),
        }
    }
    program
}

fn run(program: Vec<i32>) -> i32 {
    let program = execute(program);
    program[0]
}

fn add(pr: &mut [i32], pc: &mut usize, pm: bool, p2: bool) {
    let addr = pr[*pc + 1];
    let add2 = pr[*pc + 2];
    let add3 = pr[*pc + 3] as usize;
    pr[add3] =
        if pm { pr[addr as usize] } else { addr } + if p2 { pr[add2 as usize] } else { add2 };
    *pc += 4;
}

fn multiply(pr: &mut [i32], pc: &mut usize, pm: bool, p2: bool) {
    let addr = pr[*pc + 1];
    let add2 = pr[*pc + 2];
    let add3 = pr[*pc + 3] as usize;
    pr[add3] =
        if pm { pr[addr as usize] } else { addr } * if p2 { pr[add2 as usize] } else { add2 };
    *pc += 4;
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn running_examples() {
        assert_eq!(run([1, 0, 0, 0, 99].to_vec()), 2);
        assert_eq!(run([2, 3, 0, 3, 99].to_vec()), 2);
        assert_eq!(run([2, 4, 4, 5, 99, 0].to_vec()), 2);
        assert_eq!(run([1, 1, 1, 4, 99, 5, 6, 0, 99].to_vec()), 30);

        assert_eq!(
            execute([1002, 4, 3, 4, 33].to_vec()),
            vec![1002, 4, 3, 4, 99]
        );
    }
}
